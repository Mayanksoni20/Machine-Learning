
# coding: utf-8

# In[1]:

# things we need for NLP
import nltk
from nltk.stem.lancaster import LancasterStemmer
stemmer = LancasterStemmer()
import datetime

# things we need for Tensorflow
import numpy as np
import tflearn
import tensorflow as tf
import random
from __future__ import print_function

#Packages needed for NER
import spacy
import random
from pathlib import Path
import random
from spacy.gold import GoldParse
from spacy.tagger import Tagger
import pandas as pd


# In[2]:

# import our chat-bot intents file
import json
with open('') as json_data:
    intents = json.load(json_data)


# In[3]:

words = []
classes = []
documents = []
ignore_words = ['?']
# loop through each sentence in our intents patterns
for intent in intents['intents']:
    for pattern in intent['patterns']:
        # tokenize each word in the sentence
        w = nltk.word_tokenize(pattern)
        # add to our words list
        words.extend(w)
        # add to documents in our corpus
        documents.append((w, intent['tag']))
        # add to our classes list
        if intent['tag'] not in classes:
            classes.append(intent['tag'])
# stem and lower each word and remove duplicates
words = [stemmer.stem(w.lower()) for w in words if w not in ignore_words]
words = sorted(list(set(words)))

# remove duplicates
classes = sorted(list(set(classes)))

words = map(lambda x: x.encode('ascii'), words)
classes = map(lambda x: x.encode('ascii'), classes)

#print (len(documents), "documents")
#print (len(classes), "classes", classes)
#print (len(words), "unique stemmed words", words)


# In[4]:

# create our training data
training = []
output = []
# create an empty array for our output
output_empty = [0] * len(classes)

# training set, bag of words for each sentence
for doc in documents:
    # initialize our bag of words
    bag = []
    # list of tokenized words for the pattern
    pattern_words = doc[0]
    # stem each word
    pattern_words = [stemmer.stem(word.lower()) for word in pattern_words]
    # create our bag of words array
    for w in words:
        bag.append(1) if w in pattern_words else bag.append(0)

    # output is a '0' for each tag and '1' for current tag
    output_row = list(output_empty)
    output_row[classes.index(doc[1])] = 1

    training.append([bag, output_row])

# shuffle our features and turn into np.array
random.shuffle(training)
training = np.array(training)

# create train and test lists
train_x = list(training[:,0])
train_y = list(training[:,1])


# In[5]:

# reset underlying graph data
tf.reset_default_graph()
# Build neural network
net = tflearn.input_data(shape=[None, len(train_x[0])])
net = tflearn.fully_connected(net, 8)
net = tflearn.fully_connected(net, 8)
net = tflearn.fully_connected(net, len(train_y[0]), activation='softmax')
net = tflearn.regression(net)

# Define model and setup tensorboard
model = tflearn.DNN(net, tensorboard_dir='tflearn_logs')
# Start training (apply gradient descent algorithm)
model.fit(train_x, train_y, n_epoch=1000, batch_size=8, show_metric=True)
model.save('model.tflearn')


# In[6]:

# save all of our data structures
import pickle
pickle.dump( {'words':words, 'classes':classes, 'train_x':train_x, 'train_y':train_y}, open( "training_data", "wb" ) )


# In[7]:

# restore all of our data structures
import pickle
data = pickle.load( open( "training_data", "rb" ) )
words = data['words']
classes = data['classes']
train_x = data['train_x']
train_y = data['train_y']
# import our chat-bot intents file
import json
with open('/Users/mayanksoni/Desktop/Chatbot/LeavePolicyChatbot/train_chatbot.json') as json_data:
    intents = json.load(json_data)


# In[8]:

# load our saved model
model.load('./model.tflearn')


# In[9]:

def clean_up_sentence(sentence):
    # tokenize the pattern
    sentence_words = nltk.word_tokenize(sentence)
    # stem each word
    sentence_words = [stemmer.stem(word.lower()) for word in sentence_words]
    return sentence_words

# return bag of words array: 0 or 1 for each word in the bag that exists in the sentence
def bow(sentence, words, show_details=False):
    # tokenize the pattern
    sentence_words = clean_up_sentence(sentence)
    # bag of words
    bag = [0]*len(words)  
    for s in sentence_words:
        for i,w in enumerate(words):
            if w == s: 
                bag[i] = 1
                if show_details:
                    print ("found in bag: %s" % w)

    return(np.array(bag))


# In[10]:

# create a data structure to hold user context
context = {}

ERROR_THRESHOLD = 0.40
def classify(sentence):
    # generate probabilities from the model
    results = model.predict([bow(sentence, words)])[0]
    # filter out predictions below a threshold
    results = [[i,r] for i,r in enumerate(results) if r>ERROR_THRESHOLD]
    # sort by strength of probability
    results.sort(key=lambda x: x[1], reverse=True)
    return_list = []
    for r in results:
        return_list.append((classes[r[0]], r[1]))
    # return tuple of intent and probability
    return return_list

def response(sentence, userID='123', show_details=False):
    results = classify(sentence)
    # if we have a classification then find the matching intent tag
    if results:
        # loop as long as there are matches to process
        while results:
            for i in intents['intents']:
                # find a tag matching the first result
                if i['tag'] == results[0][0]:
                    # set context for this intent if necessary
                    if 'context_set' in i:
                        if show_details: print ('context:', i['context_set'])
                        context[userID] = i['context_set']

                    # check if this intent is contextual and applies to this user's conversation
                    if not 'context_filter' in i or                         (userID in context and 'context_filter' in i and i['context_filter'] == context[userID]):
                        if show_details: print ('tag:', i['tag'])
                        # a random response from the intent
                        return (random.choice(i['responses']))

            results.pop(0)

def leave_date(Question):
    if Question.find('today') > 1:
        leave_date = datetime.datetime.now().date()
    elif Question.find('tomorrow') >0:
        leave_date = datetime.datetime.now().date()+datetime.timedelta(days=1)
    else:
        print("Please go to benefits.ge.com to apply for your leave")
    return leave_date


# In[2]:

#Entity Recognition and new entity training.


# In[ ]:

#Loading the model we have trained.
nlp = spacy.load('en', path='/Users/mayanksoni/Spacy/')
output_dir = ('/Users/mayanksoni/Spacy')
model_name  = ('en')
pd.set_option('display.max_colwidth', -1)


# In[ ]:

#Function to return entities
def return_entity(Question):
    text = nlp(unicode(Question))
    for ent in text.ents:
        print(ent.label_, ent.text)
        return


# In[ ]:

#Unicode and conversion in the Spacy format
text = nlp(unicode(Question))
print (text)


# In[ ]:

#Function to train the model on new entity types.
def train_ner(nlp, train_data, output_dir):
    # Add new words to vocab
    for raw_text, _ in train_data:
        doc = nlp.make_doc(raw_text)
        for word in doc:
            _ = nlp.vocab[word.orth]
    random.seed(0)
    # You may need to change the learning rate. It's generally difficult to
    # guess what rate you should set, especially when you have limited data.
    nlp.entity.model.learn_rate = 0.001
    for itn in range(1000):
        random.shuffle(train_data)
        loss = 0.
        for raw_text, entity_offsets in train_data:
            doc = nlp.make_doc(raw_text)
            gold = GoldParse(doc, entities=entity_offsets)
            # By default, the GoldParse class assumes that the entities
            # described by offset are complete, and all other words should
            # have the tag 'O'. You can tell it to make no assumptions
            # about the tag of a word by giving it the tag '-'.
            # However, this allows a trivial solution to the current
            # learning problem: if words are either 'any tag' or 'ANIMAL',
            # the model can learn that all words can be tagged 'ANIMAL'.
            #for i in range(len(gold.ner)):
                #if not gold.ner[i].endswith('ANIMAL'):
                #    gold.ner[i] = '-'
            nlp.tagger(doc)
            # As of 1.9, spaCy's parser now lets you supply a dropout probability
            # This might help the model generalize better from only a few
            # examples.
            loss += nlp.entity.update(doc, gold, drop=0.9)
        if loss == 0:
            break
    # This step averages the model's weights. This may or may not be good for
    # your situation --- it's empirical.
    nlp.end_training()
    #if output_dir:
     #   if not output_dir.exists():
            #output_dir.mkdir()
    #nlp.save_to_directory(output_dir)


# In[ ]:

#Add the label that you would like to train 
nlp.entity.add_label('Address')


# In[ ]:

#Load the training data in the unicode list format.
#Function to load the data in the specific format
all_rows=[]
def create_train_data(row):
    string = str(row.train).decode('utf8')
    Entity = row.Manager_name
    start_indx = string.find(Entity)
    end_index = start_indx+len(Entity)
    one_row = [string,[(start_indx,end_index,'Manager')]]
    all_rows.append(one_row)
    return all_rows

#train data
train_data = all_rows


# In[ ]:

#Call the function and train the model, learning rate can be adjusted for best results.
train_ner(nlp, train_data, output_dir)


# In[ ]:

#Save the model to the directory.
nlp.save_to_directory('/Users/mayanksoni/Spacy')


# In[ ]:

#reload the model
nlp = spacy.load('en', path='/Users/mayanksoni/Spacy/')


# In[ ]:

#Test the new model 
Question = ""


# In[20]:

Question = ''


# In[21]:

#The output of below function shall go as a response to the user.
response(Question)


# In[22]:

#To get the date of the leave.Run this function
leave_date(Question)


# In[ ]:

#intent
classify(Question)


# In[ ]:

#entities
return_entity(Question)


# In[ ]:

#reply 
response(Question)

